#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

struct Stack
{
    int size; //size of the Stack
    int top; //top pointer to the index
    int *s; //for dynamically allocating array size
};

//array created during run time
void Create(struct Stack *st)
{
    printf("Enter size");
    scanf("%d",&st->size);
    st->top = -1; //initially
    st->s = (int *)malloc(sizeof(int)*st->size);
}

void Display(struct Stack st)
{
    //display from top
    for(int i=st.top; i>=0; i--)
    {
        printf("%d ", st.s[i]);
    }
}
//*st since the stack is gonna be modified => call by reference
void push(struct Stack *st, int x)
{
    //check if stack is full
    if(st->top == st->size - 1)
    {
        printf("stack overflow");
    }
    else
    {
        st->top++;
        st->s[st->top] = x;
    }
}

//deleting an element
int pop(struct Stack *st)
{
    int x=INT_MIN;
    if(st->top == -1)
    {
        printf("stack underflow");
    }
    else
    {
        x = st->s[st->top--];
    }
    return x;
}

//call by value is enough cuz we're not gonna modify the stack
int peek(struct Stack st, int pos)
{
    int index, x;
    index = st.top - pos + 1;  //!!!!FORMULA!!!!
    
    if(index < 0)
    {
        printf("invalid");
    }
    else
    return st.s[st.top - pos + 1];
}

//empty?
int isEmpty(struct Stack st)
{
    if(st.top==-1) return 1;
    else return 0;
}

int isFull(struct Stack st)
{
    if(st.top == st.size-1) return 1;
    else return 0;
}

int stackTop(struct Stack st)
{
    if(st.top==-1) return -1;
    else return st.s[st.top];
}

int main()
{
    struct Stack st;
    Create(&st);
    push(&st,5);
    push(&st,7);
    push(&st,3);
    
    printf("%d\n",pop(&st));
    Display(st);
    
    return 0;
}
