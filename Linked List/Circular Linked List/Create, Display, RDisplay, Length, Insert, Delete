

#include <stdio.h>
#include <stdlib.h>
struct Node
{
    int data;
    struct Node *next;
}*head;

void Create(int arr[], int n)
{
    struct Node *last, *t;
    head = (struct Node*)malloc(sizeof(struct Node));
    head->data = arr[0];
    head->next = head;  //CHANGE!! CUZ IT IS CIRCULAR
    last = head;
    
    for(int i=1; i<n; i++)
    {
        t = (struct Node*)malloc(sizeof(struct Node));
        t->data = arr[i];
        t->next = head; //CHANGE!! prepping this to be the last Node
        last->next = t;
        last = t;
    }
    
}

void Display(struct Node *head)
{
    struct Node *p = head;
    do
    {
        printf("%d ",p->data);
        p = p->next;
    } while(p!=head);
}

void RDisplay(struct Node *h)
{
    static int flag=0;
    if(h!=head || flag==0) //if both the conditions are false, it will break
    {
        flag=1;
        printf("%d ",h->data);
        RDisplay(h->next);
    }
    flag=0;
}

int Length(struct Node *p)
{
    int count=0;
    do
    {
        count++;
        p = p->next;
    }while(p!=head);
    return count;
}

void Insert(int pos, int x)
{
    struct Node *t, *p = head;
    //create a new Node
    t = (struct Node*)malloc(sizeof(struct Node));
    t->data=x;
    if(pos==0)
    {
        //special case: is the linked list empty?
        if(head==NULL)
        {
            head = t;
            head->next = head; //cuz it is circular
        }
        else
        {
            t->next = head;
            while(p->next!=head)
            {
                p=p->next;
            }
            p->next=t;
            head = t; //optional
        }
    } 
    else 
    {
        for(int i=0; i<pos-1; i++)
        {
            p=p->next;
        }
        t->next = p->next;
        p->next=t;
    }
}

int Delete(struct Node *p, int pos)
{
    struct Node *q=NULL;
    int x;
    
    //check validity of index
    if(pos < 0 || pos> Length(head))
    {
        return -1;
    }
    //head node
    if(pos==0)
    {
        x = head->data;
        if(head->next == head)
        {
            free(head);
            head = NULL;

        }
        else
        {
            while(p->next!=head)
            {
                p=p->next;
                
            }
            p->next = head->next;
            free(head);
            head = p->next;
        }
        
        
    }
    else
    {
        for(int i=0; i<pos-1 && p!=head; i++)
        {
            q = p;
            p = p->next;
        }
        q->next = p->next;
        x = p->data;
        free(p);
    }
    
    return x;
}

int main()
{
    int Arr[] = {2,3,4,5,6};
    Create(Arr, 5);
    Display(head);
    
   // printf("\n");
    //int length = printf("%d", Length(head));
    
    printf("\n");
    int deleted_element = printf("%d\n",Delete(head,0));
    deleted_element = printf("%d\n",Delete(head,6)); //returns -1 cuz of out bounds
    Display(head);


    //printf("\n");
    //RDisplay(head);
    return 0;
}
